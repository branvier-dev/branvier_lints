# We include and activate all lint rules, later below we disable the not used or desired ones.
# You can find a list of all lint rules to put in your all_lint_rules.yaml file here:
# https://dart.dev/tools/linter-rules/all
#
# For a comparison of all lint rules settings in rule styles listed below, please see this Google
# sheet: https://docs.google.com/spreadsheets/d/1Nc1gFjmCOMubWZD7f2E4fLhWN7LYaOE__tsA7bf2NjA
#
# Versions used for comparison:
#
# Core           v3.0.0     : https://pub.dev/packages/lints
# Recommended    v3.0.0     : https://pub.dev/packages/lints
# Flutter Lints  v3.0.1     : https://pub.dev/packages/flutter_lints
# Pedantic       v1.11.1    : https://pub.dev/packages/pedantic
# Effective Dart v1.3.2     : https://pub.dev/packages/effective_dart
# Flutter repo   master     : https://github.com/flutter/flutter/blob/master/analysis_options.yaml
# Lint           v2.2.0     : https://pub.dev/packages/lint
# VG Analysis    v5.1.0     : https://pub.dev/packages/very_good_analysis
# RydMike        v2.1.0     : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c
#
include: all_lint_rules.yaml

analyzer:
  plugins:
    - custom_lint
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - '*.mocks.dart'
    - '**/*.mocks.dart'
    - '**/*.pb.dart'
    - "test/.test_coverage.dart"
    - "bin/cache/**"
    - "lib/generated_plugin_registrant.dart"

  # For more information see:
  # https://dart.dev/guides/language/analysis-options#enabling-additional-type-checks
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: false # Why? Too verbose. Ex: Map<dynamic, dynamic> instead of Map.

  errors:
    todo: ignore # Why? They are not errors, they are just todos.
    included_file_warning: ignore # Why? We include all_lint_rules.yaml, which has conflicting rules.
    invalid_annotation_target: ignore # freezed
    inference_failure_on_instance_creation: ignore # Why? Discarded types are common like PageRoute<T> and Future<T>.delayed.
    inference_failure_on_function_invocation: ignore # Why? Discarded types are common like showDialog<T>.
    missing_return: error # Why? Missing returns are a common source of bugs.
    parameter_assignments: ignore # Why? Reassigning parameters is cool.
    missing_required_param: error # Why? Required parameters are required for a reason.

# Solid follows https://lints.solid.software/docs/rulesets/main guidelines.
# Pyramid https://docs.page/charlescyt/pyramid_lint/available-lints
custom_lint:
  rules:
    # Solid - PREFERENCES
    - member_ordering:
      order:
        - constructors
        - fields
        - getters_setters
        - init_state_method
        - overridden_methods
        - dispose_method
      widgets_order:
        - constructors
        - fields
        - getters_setters
        - init_state_method
        - did_change_dependencies_method
        - did_update_widget_method
        - deactivate_method
        - dispose_method
        - build_method
    - avoid_late_keyword:
      allow_initialized: true # Why? Late variables are runtime safe if initialized.
      ignored_types:
        - AnimationController
        - StreamSubscription<dynamic> #TODO - https://github.com/solid-software/solid_lints/issues/157
        - Timer
    - cyclomatic_complexity:
      max_complexity: 10

    # Solid - DISABLED
    - no_magic_number: false # broken
    - avoid_unnecessary_type_assertions: false # flutter
    - prefer_first: false # pyramid
    - prefer_last: false # pyramid
    # - no_empty_block: false # pyramid
    - avoid_non_null_assertion: false # Cool, but sometimes needed.
    - number_of_parameters: false #TODO - https://github.com/solid-software/solid_lints/issues/124
    - avoid_global_state: false #should be allowed if using @visibleForTesting
    - avoid_late_keyword: false #has false positives

    # Pyramid - DISABLED
    - avoid_empty_blocks: false # solid
    - avoid_dynamic: false # flutter
    - class_members_ordering: false # solid
    - max_lines_for_file: false # solid
    - max_lines_for_function: false # solid
    - max_switch_cases: false # solid
    - avoid_public_members_in_states: false # not necessary
    - prefer_const_constructor_declarations: false #TODO - waiting for https://github.com/charlescyt/pyramid_lint/issues/20
    - prefer_async_await: false # they are ok if used with tear-offs
    - avoid_mutable_global_variables: false # should be allowed if private
    - boolean_prefixes: false # lets no enforce this for private booleans
    - prefer_border_radius_all: false # unnecessary boilerplate
    - prefer_border_from_border_side: false # unnecessary boilerplate
linter:
  rules:
    # Flutter - DISABLED:
    implicit_call_tearoffs: false # Why? Kills the inference purpose of Dart. Bad for UseCase and other .call classes.
    prefer_final_locals: false # Why? This has false positives with if-case statements and switch expressions.
    discarded_futures: false # Why? This has false positives with FutureBuilder and several other cases.
    use_setters_to_change_properties: false # Why? Actions needs to use the format. Ex: increment(int value) => _value = value + 1. Etc
    avoid_types_on_closure_parameters: false # Why? False positives. Ex: final user = context.select((UserStore store) => store.user); 
    always_put_control_body_on_new_line: false # Why? Single line if:s are fine and also recommended in Effective Dart "DO format your code using dartfmt".
    avoid_catches_without_on_clauses: false # Why? There are situations where we voluntarily want to catch everything, especially as a library. Flutter itself disables this rule.
    cascade_invocations: false # Why? Too opinionated, using them is fine, but let's not enforce it.
    always_specify_types: false # Why? Too verbose and opinionated and goes against Dart inference style.
    prefer_int_literals: false # Why? This rule makes it impossible to infer a num as double. Ex: var value = 0.0 // LINT.
    unreachable_from_main: false # Why? Has false positive with extensions in main.
    specify_nonobvious_local_variable_types: false # Why? Some classes can't be imported and typing is impossible.
    document_ignores: false # Why? Let's not enforce this.
    one_member_abstracts: false # Why? Too opinionated. Architectural decisions should be made by the team.
 
    # CONFLICTS:
    prefer_double_quotes: false # Conflicts with prefer_single_quotes.
    avoid_annotating_with_dynamic: false # Conflicts with strict inference.
    prefer_final_parameters: false # Conflicts with avoid_final_parameters and Flutter: `Widget build(final BuildContext context)`.
    prefer_expression_function_bodies: false # Conflicts with Flutter, which has a `build` method with a single return.
    always_put_required_named_parameters_first: false # Conflicts with Flutter, which puts `super.key` first and `required this.child` last.
    avoid_positional_boolean_parameters: false # Conflicts with Flutter, which often uses such expressions: `void Function(bool) onChanged`.    
    always_use_package_imports: false # Conflicts with prefer_relative imports. Flutter core and repo also prefers it over package imports. 
    unnecessary_final: false  # Conflicts with prefer_final_locals, which makes the code more predictable and less prone to errors.

    # ENABLE ONLY ON PACKAGES:
    do_not_use_environment: false # flutter and dart
    diagnostic_describe_all_properties: false # flutter
    public_member_api_docs: false # flutter and dart
    sort_pub_dependencies: false # flutter and dart
    type_annotate_public_apis: false # flutter and dart